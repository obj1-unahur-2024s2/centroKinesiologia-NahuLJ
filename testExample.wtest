import pacientes.*
import aparatos.*

describe "group of tests for PARTE 1" {
  //PERSONAS
  const leonardo = new Paciente(edad = 40, nivelFortalezaMuscular = 20, nivelDolor = 10)
  const milena = new Paciente(edad = 3, nivelFortalezaMuscular = 50, nivelDolor = 30)

  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()
  test "Leonardo puede usar los tres aparatos creados, mientras que Milena puede usar sólo el magneto." {
    //leonardo
    assert.that(magneto.puedeSerUsadoPor(leonardo))
    assert.that(bicicleta.puedeSerUsadoPor(leonardo))
    assert.that(minitramp.puedeSerUsadoPor(leonardo))
    //milena
    assert.that(magneto.puedeSerUsadoPor(milena))
    assert.notThat(bicicleta.puedeSerUsadoPor(milena))
    assert.notThat(minitramp.puedeSerUsadoPor(milena))
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9." {
    magneto.realizarTratamientoEn(leonardo)
    assert.equals(9, leonardo.nivelDolor())
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Milena baja a 27." {
    magneto.realizarTratamientoEn(milena)
    assert.equals(27, milena.nivelDolor())
  }

  test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6, y la fortaleza sube a 23." {
    bicicleta.realizarTratamientoEn(leonardo)
    assert.equals(6, leonardo.nivelDolor())
    assert.equals(23, leonardo.nivelFortalezaMuscular())
  }

  test "Después de usar el minitramp una vez, la fortaleza de Leonardo sube a 24." {
    minitramp.realizarTratamientoEn(leonardo)
    assert.equals(24, leonardo.nivelFortalezaMuscular())
  }
}

describe "group of tests for PARTE 2" {
  //PERSONAS
  const leonardo = new Paciente(edad = 40, nivelFortalezaMuscular = 20, nivelDolor = 10, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])
  const milena = new Paciente(edad = 3, nivelFortalezaMuscular = 50, nivelDolor = 30, 
    rutinaAsignada = [magneto,bicicleta])

  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()

  test "leonardo puede hacer la rutina, y al terminarla su dolor baja a 1.8 y su fortaleza sube a 30" {
    leonardo.realizarRutina()
    assert.that(leonardo.puedeRealizarSuRutina())
    assert.equals(1.8,leonardo.nivelDolor())
    assert.equals(30,leonardo.nivelFortalezaMuscular())
  }

  test "milena no puede realizar su rutina, si intenta hacerla se lanza un error" {
    assert.notThat(milena.puedeRealizarSuRutina())
    assert.throwsExceptionWithType(new DomainException(),{milena.realizarRutina()})
  }
}

describe "group of tests for PARTE 3" {
  //PERSONAS
  const nicolas = new PacienteResistente(edad = 40, nivelFortalezaMuscular = 20, nivelDolor = 10, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])

  const victoria = new PacienteCaprichoso(edad = 30, nivelFortalezaMuscular = 40, nivelDolor = 10, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])

  const julian = new PacienteCaprichoso(edad = 20, nivelFortalezaMuscular = 50, nivelDolor = 54, 
    rutinaAsignada = [bicicletaRoja, magnetoVerde, bicicleta])

  const zoe = new PacienteRapidaCuracion(edad = 50, nivelFortalezaMuscular = 40, nivelDolor = 14, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])

  //APARATOS
  const magneto = new Magneto()
  const magnetoVerde = new Magneto(color = "verde")
  const bicicleta = new Bicicleta()
  const bicicletaRoja = new Bicicleta(color = "rojo")
  const minitramp = new Minitramp()

  test "nicolas puede hacer su rutina, al terminarla acaba con dolor 1.8 y fortaleza 34" {
    nicolas.realizarRutina()
    assert.that(nicolas.puedeRealizarSuRutina())
    assert.equals(1.8, nicolas.nivelDolor())
    assert.equals(34, nicolas.nivelFortalezaMuscular())
  }

  test "victoria no puede realizar su rutina, si intenta hacer lanza error" {
    assert.notThat(victoria.puedeRealizarSuRutina())
    assert.throwsExceptionWithType(new DomainException(), {victoria.realizarRutina()})
  }

  test "julian puede hacer su rutina, al terminarla acaba con 29.3 de dolor y fortaleza 62" {
    julian.realizarRutina()
    assert.that(julian.puedeRealizarSuRutina())
    assert.equals(29.3, julian.nivelDolor())
    assert.equals(62, julian.nivelFortalezaMuscular())
  }

  test "zoe puede hacer su rutina, si le asignamos 2 de valor de recuperacion al terminar su rutina acaba con 3.4 de dolor y fortaleza 51" {
    zoe.modificarValorDeRecuperacionA(2)
    zoe.realizarRutina()
    assert.that(zoe.puedeRealizarSuRutina())
    assert.equals(3.4, zoe.nivelDolor())
    assert.equals(51, zoe.nivelFortalezaMuscular())
  }
}

describe "group of tests for PARTE 4" {
  //PERSONAS
  const nicolas = new PacienteResistente(edad = 40, nivelFortalezaMuscular = 20, nivelDolor = 10, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])

  const victoria = new PacienteCaprichoso(edad = 30, nivelFortalezaMuscular = 40, nivelDolor = 10, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])

  const julian = new PacienteCaprichoso(edad = 20, nivelFortalezaMuscular = 50, nivelDolor = 54, 
    rutinaAsignada = [bicicletaRoja, magnetoVerde, bicicleta])

  const zoe = new PacienteRapidaCuracion(edad = 50, nivelFortalezaMuscular = 40, nivelDolor = 14, 
    rutinaAsignada = [bicicleta, minitramp, bicicleta, magneto])

  //APARATOS NUEVOS
  const magneto = new Magneto()
  const magnetoVerde = new Magneto(color = "verde")
  const bicicleta = new Bicicleta()
  const bicicletaRoja = new Bicicleta(color = "rojo")
  const minitramp = new Minitramp()
  
  //APARATOS QUE NECESITAN MANTENIMIENTO
  const magnetoViejo = new Magneto(puntosImantacion = 99)
  const bicicletaVieja = new Bicicleta(cantidadDesajustesTornillos = 10, cantidadPerdidasAceite = 5)

  method initialize(){
    centroKinesiologico.agregarAparatos(
      [magneto,magnetoVerde,bicicleta,bicicletaRoja,minitramp,
      magnetoViejo, bicicletaVieja]
    )
    centroKinesiologico.agregarPacientes([nicolas,victoria,julian,zoe])
  }

  test "los colores de sus aparatos son blanco, verde y rojo" {
    assert.equals(#{"blanco","verde","rojo"}, centroKinesiologico.coloresDeLasMaquinas())
  }

  test "el centro no tiene pacientes menores" {
    assert.equals([], centroKinesiologico.pacientesMenores())
  }

  test "la cantidad de pacientes que no pueden hacer su rutina es 1" {
    assert.equals(1, centroKinesiologico.cantidadPacientesQueNoPuedenHacerSuRutina())
  }

  //PARTE 5
  test "el centro no esta en condiciones optimas" {
    assert.notThat(centroKinesiologico.estaEnOptimasCondiciones())
  }

  test "el centro no esta complicado" {
    assert.notThat(centroKinesiologico.estaComplicado())
  }

  test "si registra el centro una visita tecnica, se realiza en la bicicletaVieja, y el magnetoViejo" {
    centroKinesiologico.registrarVisitaTecnica()
    assert.equals(599, magnetoViejo.puntosImantacion())
    assert.equals(0, bicicletaVieja.cantidadDesajustesTornillos())
    assert.equals(0, bicicletaVieja.cantidadPerdidasAceite())
    assert.that(centroKinesiologico.estaEnOptimasCondiciones())
    
  }
}